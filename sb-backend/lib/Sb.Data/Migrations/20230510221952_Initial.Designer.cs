// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sb.Data;

#nullable disable

namespace Sb.Data.Migrations
{
    [DbContext(typeof(SbContext))]
    [Migration("20230510221952_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sb.Data.Models.Code", b =>
                {
                    b.Property<Guid>("BoatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("BoatId");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("BoatCodes", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.ConnectedAccount", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("IdentityProviderId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "IdentityProviderId");

                    b.HasIndex("IdentityProviderId");

                    b.ToTable("ConnectedAccounts", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.EntityBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Sb.Data.Models.IdentityProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdentityProviders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Google"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Facebook"
                        });
                });

            modelBuilder.Entity("Sb.Data.Models.ModuleOptionVote", b =>
                {
                    b.Property<Guid>("CrewMemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModuleOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModuleOptionId1")
                        .HasColumnType("uuid");

                    b.HasKey("CrewMemberId", "ModuleOptionId");

                    b.HasIndex("ModuleOptionId");

                    b.HasIndex("ModuleOptionId1");

                    b.ToTable("ModuleOptionVotes", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.Banner", b =>
                {
                    b.HasBaseType("Sb.Data.Models.EntityBase");

                    b.Property<Guid>("BoatId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("Show")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Color");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasIndex("BoatId")
                        .IsUnique();

                    b.ToTable("BoatBanners", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.Boat", b =>
                {
                    b.HasBaseType("Sb.Data.Models.EntityBase");

                    b.Property<Guid>("CaptainUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasIndex("CaptainUserId")
                        .IsUnique();

                    b.ToTable("Boats", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.CrewMember", b =>
                {
                    b.HasBaseType("Sb.Data.Models.EntityBase");

                    b.Property<Guid>("BoatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Info")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("BoatId");

                    b.HasIndex("UserId");

                    b.ToTable("CrewMembers", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.Module", b =>
                {
                    b.HasBaseType("Sb.Data.Models.EntityBase");

                    b.Property<Guid>("BoatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByCrewMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("FinalizedOptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("BoatId");

                    b.HasIndex("CreatedByCrewMemberId");

                    b.HasIndex("FinalizedOptionId")
                        .IsUnique();

                    b.ToTable("Modules", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.ModuleOption", b =>
                {
                    b.HasBaseType("Sb.Data.Models.EntityBase");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ModuleId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.ModuleSettings", b =>
                {
                    b.HasBaseType("Sb.Data.Models.EntityBase");

                    b.Property<bool>("AllowMultiple")
                        .HasColumnType("boolean");

                    b.Property<bool>("AnonymousVoting")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.HasIndex("ModuleId")
                        .IsUnique();

                    b.ToTable("ModuleSettings");
                });

            modelBuilder.Entity("Sb.Data.Models.User", b =>
                {
                    b.HasBaseType("Sb.Data.Models.EntityBase");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.DateModuleOption", b =>
                {
                    b.HasBaseType("Sb.Data.Models.ModuleOption");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("DateModuleOptions", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.LocationModuleOption", b =>
                {
                    b.HasBaseType("Sb.Data.Models.ModuleOption");

                    b.ToTable("LocationModuleOptions", (string)null);
                });

            modelBuilder.Entity("Sb.Data.Models.Code", b =>
                {
                    b.HasOne("Sb.Data.Models.Boat", "Boat")
                        .WithOne("Code")
                        .HasForeignKey("Sb.Data.Models.Code", "BoatId");

                    b.Navigation("Boat");
                });

            modelBuilder.Entity("Sb.Data.Models.ConnectedAccount", b =>
                {
                    b.HasOne("Sb.Data.Models.IdentityProvider", "IdentityProvider")
                        .WithMany()
                        .HasForeignKey("IdentityProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sb.Data.Models.User", null)
                        .WithMany("ConnectedAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityProvider");
                });

            modelBuilder.Entity("Sb.Data.Models.ModuleOptionVote", b =>
                {
                    b.HasOne("Sb.Data.Models.CrewMember", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sb.Data.Models.ModuleOption", null)
                        .WithMany("Votes")
                        .HasForeignKey("ModuleOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sb.Data.Models.ModuleOption", "ModuleOption")
                        .WithMany()
                        .HasForeignKey("ModuleOptionId1");

                    b.Navigation("CrewMember");

                    b.Navigation("ModuleOption");
                });

            modelBuilder.Entity("Sb.Data.Models.Banner", b =>
                {
                    b.HasOne("Sb.Data.Models.Boat", "Boat")
                        .WithOne("Banner")
                        .HasForeignKey("Sb.Data.Models.Banner", "BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boat");
                });

            modelBuilder.Entity("Sb.Data.Models.Boat", b =>
                {
                    b.HasOne("Sb.Data.Models.User", "Captain")
                        .WithOne()
                        .HasForeignKey("Sb.Data.Models.Boat", "CaptainUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Captain");
                });

            modelBuilder.Entity("Sb.Data.Models.CrewMember", b =>
                {
                    b.HasOne("Sb.Data.Models.Boat", "Boat")
                        .WithMany("Crew")
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sb.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sb.Data.Models.Module", b =>
                {
                    b.HasOne("Sb.Data.Models.Boat", "Boat")
                        .WithMany()
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sb.Data.Models.CrewMember", "CreatedByCrewMember")
                        .WithMany()
                        .HasForeignKey("CreatedByCrewMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sb.Data.Models.ModuleOption", "FinalizedOption")
                        .WithOne()
                        .HasForeignKey("Sb.Data.Models.Module", "FinalizedOptionId");

                    b.Navigation("Boat");

                    b.Navigation("CreatedByCrewMember");

                    b.Navigation("FinalizedOption");
                });

            modelBuilder.Entity("Sb.Data.Models.ModuleOption", b =>
                {
                    b.HasOne("Sb.Data.Models.CrewMember", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sb.Data.Models.Module", "Module")
                        .WithMany("ModuleOptions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Sb.Data.Models.ModuleSettings", b =>
                {
                    b.HasOne("Sb.Data.Models.Module", "Module")
                        .WithOne("Settings")
                        .HasForeignKey("Sb.Data.Models.ModuleSettings", "ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Sb.Data.Models.Boat", b =>
                {
                    b.Navigation("Banner");

                    b.Navigation("Code");

                    b.Navigation("Crew");
                });

            modelBuilder.Entity("Sb.Data.Models.Module", b =>
                {
                    b.Navigation("ModuleOptions");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Sb.Data.Models.ModuleOption", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Sb.Data.Models.User", b =>
                {
                    b.Navigation("ConnectedAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
